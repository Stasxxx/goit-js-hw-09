{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAYC,SAASC,cAAc,SACrBD,SAASC,cAAc,yBAiC3C,SAASC,EAAeC,EAAUC,GAEhC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACxCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,YAEnBA,MAzCLL,EAAUa,iBAAiB,UAG3B,SAAsBC,GACpBA,EAAIC,iBACJ,IAAMC,EAAWF,EAAIG,cAAcD,SAC7BE,EAASF,EAASE,OAAOC,MACzBC,EAAOC,OAAOL,EAASI,KAAKD,OAC9BG,EAAQD,OAAOL,EAASX,MAAMc,OAElC,GAAID,EAAS,GAAKE,EAAO,GAAKE,EAAQ,EAGpC,YAFAxB,EAAAyB,OAAOC,QAAS,0BACd,CAAEpB,SAAU,eAIhB,IAAK,IAAIqB,EAAW,EAAGA,GAAYP,EAAQO,GAAY,EAGrDtB,EAAcsB,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACrBP,EAAAyB,OAAOK,QAAQ,sBAAqCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,UAEzDyB,OAAM,SAAAH,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACpBP,EAAAyB,OAAOC,QAAQ,qBAAoCK,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,UAEtD0B,QAAQjB,EAAIG,cAAce,SAC7BV,GAASF,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nconst formInput = document.querySelector('.form');\nconst buttonInput = document.querySelector('button[type=\"submit\"]');\n\nformInput.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const elements = evt.currentTarget.elements;\n  const amount = elements.amount.value;\n  const step = Number(elements.step.value);\n  let delay = Number(elements.delay.value);\n  \n  if (amount < 0 || step < 0 || delay < 0) {\n    Notify.failure(`Enter a positive number`,\n      { position: \"center-top\" });\n    return\n  };\n\n  for (let position = 1; position <= amount; position += 1) {\n    \n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n    Notify.success(` Fulfilled promise ${position} in ${delay}ms`);\n  })\n    .catch(({ position, delay }) => {\n    Notify.failure(` Rejected promise ${position} in ${delay}ms`);\n  })\n      .finally(evt.currentTarget.reset());\n    delay += step;\n  }\n}\n\nfunction createPromise( position, delay) {\n   \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n  setTimeout(() => {\n    if (shouldResolve) {\n      resolve({position, delay});\n    } else {\n      reject({position, delay});\n    }\n  }, delay);   \n  })\n};\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formInput","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","elements","currentTarget","amount","value","step","Number","delay1","Notify","failure","position1","then","param","success","concat","catch","finally","reset"],"version":3,"file":"03-promises.ff67112b.js.map"}